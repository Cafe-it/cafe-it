/* tslint:disable */
/* eslint-disable */
/**
 * Cafeit Client API
 * Real-time cafe seat availability platform API for client applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cafe,
  Location,
  SeatAvailability,
} from '../models/index';
import {
    CafeFromJSON,
    CafeToJSON,
    LocationFromJSON,
    LocationToJSON,
    SeatAvailabilityFromJSON,
    SeatAvailabilityToJSON,
} from '../models/index';

export interface GetCafeByIdRequest {
    cafeId: string;
}

export interface GetCafeSeatsByIdRequest {
    cafeId: string;
}

export interface GetNearbyCafesRequest {
    location?: Location;
    radius?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get detailed information about a specific cafe
     * Get cafe details
     */
    async getCafeByIdRaw(requestParameters: GetCafeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cafe>> {
        if (requestParameters['cafeId'] == null) {
            throw new runtime.RequiredError(
                'cafeId',
                'Required parameter "cafeId" was null or undefined when calling getCafeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cafes/{cafeId}`;
        urlPath = urlPath.replace(`{${"cafeId"}}`, encodeURIComponent(String(requestParameters['cafeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CafeFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific cafe
     * Get cafe details
     */
    async getCafeById(requestParameters: GetCafeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cafe> {
        const response = await this.getCafeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current seat availability for a cafe
     * Get cafe seat availability
     */
    async getCafeSeatsByIdRaw(requestParameters: GetCafeSeatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeatAvailability>> {
        if (requestParameters['cafeId'] == null) {
            throw new runtime.RequiredError(
                'cafeId',
                'Required parameter "cafeId" was null or undefined when calling getCafeSeatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cafes/{cafeId}/seats-availability`;
        urlPath = urlPath.replace(`{${"cafeId"}}`, encodeURIComponent(String(requestParameters['cafeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeatAvailabilityFromJSON(jsonValue));
    }

    /**
     * Get the current seat availability for a cafe
     * Get cafe seat availability
     */
    async getCafeSeatsById(requestParameters: GetCafeSeatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeatAvailability> {
        const response = await this.getCafeSeatsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of nearby cafes based on user location
     * Get nearby cafes
     */
    async getNearbyCafesRaw(requestParameters: GetNearbyCafesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Cafe>>> {
        const queryParameters: any = {};

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location'];
        }

        if (requestParameters['radius'] != null) {
            queryParameters['radius'] = requestParameters['radius'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cafes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CafeFromJSON));
    }

    /**
     * Retrieve list of nearby cafes based on user location
     * Get nearby cafes
     */
    async getNearbyCafes(requestParameters: GetNearbyCafesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Cafe>> {
        const response = await this.getNearbyCafesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
