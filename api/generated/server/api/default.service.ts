/**
 * Cafeit Client API
 * Real-time cafe seat availability platform API for client applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { Cafe } from '../model/cafe';
import { Location } from '../model/location';
import { SeatAvailability } from '../model/seatAvailability';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class DefaultService {

    protected basePath = 'http://localhost:3000/api';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get cafe details
     * Get detailed information about a specific cafe
     * @param cafeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getCafeByIdOpts.config] Override http request option.
     */
    public getCafeById(cafeId: string, getCafeByIdOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Cafe>>;
    public getCafeById(cafeId: string, getCafeByIdOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (cafeId === null || cafeId === undefined) {
            throw new Error('Required parameter cafeId was null or undefined when calling getCafeById.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Cafe>(`${this.basePath}/cafes/${encodeURIComponent(String(cafeId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getCafeByIdOpts?.config,
                        headers: {...headers, ...getCafeByIdOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get cafe seat availability
     * Get the current seat availability for a cafe
     * @param cafeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getCafeSeatsByIdOpts.config] Override http request option.
     */
    public getCafeSeatsById(cafeId: string, getCafeSeatsByIdOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<SeatAvailability>>;
    public getCafeSeatsById(cafeId: string, getCafeSeatsByIdOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (cafeId === null || cafeId === undefined) {
            throw new Error('Required parameter cafeId was null or undefined when calling getCafeSeatsById.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<SeatAvailability>(`${this.basePath}/cafes/${encodeURIComponent(String(cafeId))}/seats-availability`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getCafeSeatsByIdOpts?.config,
                        headers: {...headers, ...getCafeSeatsByIdOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get nearby cafes
     * Retrieve list of nearby cafes based on user location
     * @param location User\&#39;s current location
     * @param radius Search radius in kilometers
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getNearbyCafesOpts.config] Override http request option.
     */
    public getNearbyCafes(location?: Location, radius?: number, getNearbyCafesOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Array<Cafe>>>;
    public getNearbyCafes(location?: Location, radius?: number, getNearbyCafesOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (location !== undefined && location !== null) {
            queryParameters.append('location', <any>location);
        }
        if (radius !== undefined && radius !== null) {
            queryParameters.append('radius', <any>radius);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<Cafe>>(`${this.basePath}/cafes`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getNearbyCafesOpts?.config,
                        headers: {...headers, ...getNearbyCafesOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
